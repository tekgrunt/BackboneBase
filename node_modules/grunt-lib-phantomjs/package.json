{
  "_args": [
    [
      "grunt-lib-phantomjs@github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "/Users/tekgrunt/Development/Carmanah/projects/cbcMusic/code/Artist Admin Application/node_modules/grunt-mocha"
    ]
  ],
  "_from": "gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
  "_id": "grunt-lib-phantomjs@1.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/grunt-lib-phantomjs",
  "_phantomChildren": {
    "glob": "7.0.3"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/gruntjs/grunt-lib-phantomjs/776bc346a8b7e151fe55c7f6dcb5563c0272e51b/package.json",
      "gitUrl": "git://github.com/gruntjs/grunt-lib-phantomjs.git#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "httpsUrl": "git+https://github.com/gruntjs/grunt-lib-phantomjs.git#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "shortcut": "github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "ssh": "git@github.com:gruntjs/grunt-lib-phantomjs.git#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "sshUrl": "git+ssh://git@github.com/gruntjs/grunt-lib-phantomjs.git#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
      "type": "github"
    },
    "name": "grunt-lib-phantomjs",
    "raw": "grunt-lib-phantomjs@github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
    "rawSpec": "github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
    "scope": null,
    "spec": "github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
    "type": "hosted"
  },
  "_requiredBy": [
    "/grunt-mocha"
  ],
  "_resolved": "git://github.com/gruntjs/grunt-lib-phantomjs.git#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
  "_shasum": "c800f370be4994e931a990de78d3052f3ad58ded",
  "_shrinkwrap": null,
  "_spec": "grunt-lib-phantomjs@github:gruntjs/grunt-lib-phantomjs#776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
  "_where": "/Users/tekgrunt/Development/Carmanah/projects/cbcMusic/code/Artist Admin Application/node_modules/grunt-mocha",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-lib-phantomjs/issues"
  },
  "contributors": [
    {
      "name": "FG Ribreau"
    },
    {
      "name": "\"Cowboy\" Ben Alman",
      "url": "http://benalman.com/"
    },
    {
      "name": "Kyle Robinson Young",
      "url": "http://dontkry.com/"
    },
    {
      "name": "Tyler Kellen",
      "url": "http://goingslowly.com"
    },
    {
      "name": "Sindre Sorhus",
      "url": "http://sindresorhus.com"
    },
    {
      "name": "Vlad Filippov",
      "url": "http://vladfilippov.com/"
    },
    {
      "name": "Brian J. Dowling"
    },
    {
      "name": "Chris Talkington"
    },
    {
      "name": "Cymen Vig"
    },
    {
      "name": "Jörn Zaefferer",
      "url": "http://bassistance.de/"
    },
    {
      "name": "Ghislain Seguin"
    },
    {
      "name": "Ian Crowther"
    },
    {
      "name": "Jared Stehler"
    },
    {
      "name": "Jarrod Overson"
    },
    {
      "name": "Kelly Miyashiro"
    },
    {
      "name": "Nick Nisi"
    },
    {
      "name": "Patrick Kettner"
    },
    {
      "name": "Sébastien Cevey"
    },
    {
      "name": "William Dibbern"
    }
  ],
  "dependencies": {
    "eventemitter2": "^0.4.9",
    "phantomjs-prebuilt": "^2.1.3",
    "rimraf": "^2.5.2",
    "semver": "^4.3.0",
    "temporary": "^0.0.8"
  },
  "description": "Grunt and PhantomJS, sitting in a tree",
  "devDependencies": {
    "difflet": "^0.2.3",
    "express": "^4.11.2",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.11.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "lib",
    "phantomjs"
  ],
  "gitHead": "776bc346a8b7e151fe55c7f6dcb5563c0272e51b",
  "homepage": "https://github.com/gruntjs/grunt-lib-phantomjs#readme",
  "license": "MIT",
  "main": "lib/phantomjs",
  "name": "grunt-lib-phantomjs",
  "optionalDependencies": {},
  "readme": "# grunt-lib-phantomjs [![Build Status](https://travis-ci.org/gruntjs/grunt-lib-phantomjs.png?branch=master)](https://travis-ci.org/gruntjs/grunt-lib-phantomjs)\n\n> Grunt and PhantomJS, sitting in a tree.\n\n\n## Usage\n\nThe best way to understand how this lib should be used is by looking at the [grunt-contrib-qunit](https://github.com/gruntjs/grunt-contrib-qunit) plugin. Mainly, look at how [the lib is required](https://github.com/gruntjs/grunt-contrib-qunit/blob/d99291713d32f84e50303d6e51eb2dab40b1deb6/tasks/qunit.js#L17), how [event handlers are bound](https://github.com/gruntjs/grunt-contrib-qunit/blob/d99291713d32f84e50303d6e51eb2dab40b1deb6/tasks/qunit.js#L61-L144) and how [PhantomJS is actually spawned](https://github.com/gruntjs/grunt-contrib-qunit/blob/d99291713d32f84e50303d6e51eb2dab40b1deb6/tasks/qunit.js#L177-L190).\n\nAlso, in the case of the grunt-contrib-qunit plugin, it's important to know that the page being loaded into PhantomJS *doesn't* know it will be loaded into PhantomJS, and as such doesn't have any PhantomJS->Grunt code in it. That communication code, aka. the [\"bridge\"](https://github.com/gruntjs/grunt-contrib-qunit/blob/d99291713d32f84e50303d6e51eb2dab40b1deb6/phantomjs/bridge.js), is dynamically [injected into the html page](https://github.com/gruntjs/grunt-contrib-qunit/blob/d99291713d32f84e50303d6e51eb2dab40b1deb6/tasks/qunit.js#L152).\n\n\n## An inline example\n\nIf a Grunt task looked something like this:\n\n```js\ngrunt.registerTask('mytask', 'Integrate with phantomjs.', function() {\n  var phantomjs = require('grunt-lib-phantomjs').init(grunt);\n  var errorCount = 0;\n\n  // Handle any number of namespaced events like so.\n  phantomjs.on('mytask.ok', function(msg) {\n    grunt.log.writeln(msg);\n  });\n\n  phantomjs.on('mytask.error', function(msg) {\n    errorCount++;\n    grunt.log.error(msg);\n  });\n\n  // Create some kind of \"all done\" event.\n  phantomjs.on('mytask.done', function() {\n    phantomjs.halt();\n  });\n\n  // Built-in error handlers.\n  phantomjs.on('fail.load', function(url) {\n    phantomjs.halt();\n    grunt.warn('PhantomJS unable to load URL.');\n  });\n\n  phantomjs.on('fail.timeout', function() {\n    phantomjs.halt();\n    grunt.warn('PhantomJS timed out.');\n  });\n\n  // This task is async.\n  var done = this.async();\n\n  // Spawn phantomjs\n  phantomjs.spawn('test.html', {\n    // Additional PhantomJS options.\n    options: {},\n    // Complete the task when done.\n    done: function(err) {\n      done(err || errorCount === 0);\n    }\n  });\n\n});\n```\n\nAnd `test.html` looked something like this (note the \"bridge\" is hard-coded into this page and not injected):\n\n```html\n<!doctype html>\n<html>\n<head>\n<script>\n\n// Send messages to the parent PhantomJS process via alert! Good times!!\nfunction sendMessage() {\n  var args = [].slice.call(arguments);\n  alert(JSON.stringify(args));\n}\n\nsendMessage('mytask.ok', 'Something worked.');\nsendMessage('mytask.error', 'Something failed.');\nsendMessage('mytask.done');\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\nThen running Grunt would behave something like this:\n\n```shell\n$ grunt mytask\nRunning \"mytask\" task\nSomething worked.\n>> Something failed.\nWarning: Task \"mytask\" failed. Use --force to continue.\n\nAborted due to warnings.\n```\n\n\n## API\n\n### phantomjs.halt()\n\nCall this when everything has finished successfully, or when something horrible happens, and you need to clean up and abort.\n\n### phantomjs.spawn(pageURL, options)\n\nSpawn a `PhantomJS` process. The method returns a reference to the spawned process.<br>\nThis method has the following arguments:\n\n#### pageURL\n\nType: `string`<br>\nDefault: no default value, the user has to set it explicitly.\n\nURL or path to the page .html test file to run.\n\n#### Options\n\nType: `object`\n\nThe options object has these possible properties:\n\n##### done\n\nType: `function`<br>\nDefault: no default value, the user has to set it explicitly.\n\nThe callback to call when the task is done.\n\n##### failCode\n\nType: `number`<br>\nDefault: 0\n\nThe error code to exit with when an Error occurs.\n\n##### killTimeout\n\nType: `number`<br>\nDefault: `1000` ms\n\nThe timeout in milliseconds after which the PhantomJS process will be killed.\n\n##### options (PhantomJS options)\n\nType: `object`<br>\nDefault: `{}`\n\nAdditional options to passe to `PhantomJS`. This object has the following properties:\n\n###### timeout\n\nType: `number`<br>\nDefault: `undefined`\n\nPhantomJS' timeout, in milliseconds.\n\n###### inject\n\nType: `string|array`<br>\nDefault: `undefined`\n\nOne or multiple (array) JavaScript file names to inject into the page.\n\n###### page\n\nType: `object`<br>\nDefault: `undefined`\n\nAn object of options for the PhantomJS [`page` object](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage).\n\n###### screenshot\n\nType: `boolean`<br>\nDefault: `undefined`\n\nSaves a screenshot on failure\n\n\n## OS Dependencies\n\nPhantomJS requires these dependencies on Ubuntu/Debian:\n\n```\napt-get install libfontconfig1 fontconfig libfontconfig1-dev libfreetype6-dev\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gruntjs/grunt-lib-phantomjs.git"
  },
  "scripts": {
    "test": "grunt jshint test"
  },
  "version": "1.0.1"
}
